#!/usr/bin/python3
#----------------------------------------------------------------------------------------------
# RPi-Smart-Still | (CopyLeft) 2023-Present | Larry Athey (https://panhandleponics.com)
#
# Hydrometer serial data reader, reads from the device specified in config.ini->HYDRO_PORT
#
# Don't rag on my weird ass Python code, it's not my primary language. All this was originally
# in C, but the WiringPi library only supports Raspberry Pi (Broadcom) boards, not clones. I've
# had to rewrite everything in Python with the assistance of the Grok AI (x.com) to coach me on
# porting from one language to the other. I honestly detest Python and have no idea how it ever
# became a standard. Whitespace aware unencapsulated shit language, reminds me of 1980's BASIC.
#----------------------------------------------------------------------------------------------
import serial
import rss
#----------------------------------------------------------------------------------------------
def clean_utf8(buffer):
  valid_utf8 = []
  i = 0
  while i < len(buffer):
    # Check for ASCII range
    if buffer[i] < 128:
      valid_utf8.append(buffer[i])
    elif buffer[i] >= 194 and buffer[i] < 245:  # Start of multi-byte sequence
      seq_length = 0
      if buffer[i] >= 224: seq_length = 3
      elif buffer[i] >= 208: seq_length = 2
      elif buffer[i] >= 194: seq_length = 2
      # Check if there are enough bytes left for the sequence
      if i + seq_length <= len(buffer):
        # Check if all following bytes are valid UTF-8 continuations
        if all(byte & 192 == 128 for byte in buffer[i+1:i+seq_length]):
          valid_utf8.extend(buffer[i:i+seq_length])
          i += seq_length - 1
        else:
          # Invalid UTF-8 sequence, replace or skip
          # Here, we'll skip (you might want to replace with a space or another character)
          pass
      else:
        # Not enough bytes for the sequence, skip
        pass
    else:
      # Invalid start byte for UTF-8, skip or replace
      pass
    i += 1
  return bytes(valid_utf8)
#----------------------------------------------------------------------------------------------
def read_until_hash(dev_name):
  # Initialize serial connection
  ser = serial.Serial(
    port=dev_name,
    baudrate=9600,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS,
    timeout=1
  )

  # Buffer to accumulate received data
  buffer = bytearray()

  # Clear the UART input buffer
  ser.reset_input_buffer()

  # Attempt to read until '#' is received
  try:
    while True:
      # Read a byte from the serial connection
      byte = ser.read(1)

      # If byte is empty, we've timed out
      if not byte:
        continue

      buffer.extend(byte)

      # Check if '#' is in the buffer
      if b'#' in buffer:
        # Clean the buffer of any characters that aren't ASCII printable
        buffer = clean_utf8(buffer)
        # Find the position of '#' and slice the buffer accordingly
        hash_index = buffer.index(b'#')
        data = buffer[:hash_index + 1]
        return data.decode('utf-8')

  except KeyboardInterrupt:
    print("\nOperation interrupted by user.")
    return None

  finally:
    # Close the serial connection
    ser.close()
#----------------------------------------------------------------------------------------------
if rss.readConfig():
  received_data = read_until_hash(rss.config.get("HYDRO_PORT"))
  if received_data:
    print(received_data)
else:
  print("Cannot read the RPi Smart Still configuration file, terminating script.")
#----------------------------------------------------------------------------------------------
